{"version":3,"sources":["../node_modules/@stencil/core/internal/client lazy /^/.//.*$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","app/views/map/mapcore.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","noop","esriConfig","apiKey","webmap","WebMap","portalItem","basemap","view","MapView","map","center","zoom","location","latitude","longitude","forEach","element","measureThisAction","title","point","type","popupTemplate","content","actions","attributes","Name","Lat","Lon","Description","pointGraphic","Graphic","geometry","symbol","color","outline","width","graphics","add","initialize","container","setCurrentLocation","handleOpenDialog","popup","on","event","action","when","_","catch"],"mappings":"4GAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,KAGRL,EAAyBQ,KAAO,WAAa,MAAO,IACpDR,EAAyBG,QAAUH,EACnCS,EAAOC,QAAUV,EACjBA,EAAyBW,GAAK,M,kCCX9B,iLAkBMC,GAlBN,QAkBa,cAEbC,IAAWC,OAAS,uGAOb,IAAMC,EAAS,IAAIC,IAAO,CAC7BC,WAAY,CACRN,GAAI,oCAERO,QAAS,kBAIAC,EAAO,IAAIC,IAAQ,CAC5BC,IAAKN,EACLO,OAAQ,EAAE,IAAK,IACfC,KAAM,IA/BU,CAChB,CAAEC,SAAU,aAAcC,SAAU,QAASC,WAAY,QACzD,CAAEF,SAAU,aAAcC,SAAU,QAASC,WAAY,SACzD,CAAEF,SAAU,mBAAoBC,SAAU,QAASC,WAAY,UAC/D,CAAEF,SAAU,kBAAmBC,SAAU,QAASC,WAAY,UAC9D,CAAEF,SAAU,kBAAmBC,SAAU,QAASC,WAAY,UAE9D,CAAEF,SAAU,kBAAmBC,SAAU,QAASC,WAAY,SAC9D,CAAEF,SAAU,eAAgBC,SAAU,QAASC,WAAY,UA0CnDC,SAAQ,SAAAC,GAChB,IAAMC,EAAoB,CACtBC,MAAO,eACPnB,GAAI,aACJa,SAAUI,EAAQJ,UAGhBO,EAAQ,CACVC,KAAM,QACNN,UAAWE,EAAO,UAClBH,SAAUG,EAAO,UAWfK,EAAgB,CAClBH,MAAO,SACPI,QAAS,+CACTC,QAAS,CAACN,IAERO,EAAa,CACfC,KAAMT,EAAQJ,SACdc,IAAKV,EAAQH,SACbc,IAAKX,EAAQF,UACbc,YAAa,qBAGXC,EAAe,IAAIC,IAAQ,CAC7BC,SAAUZ,EACVa,OAvBuB,CACvBZ,KAAM,gBACNa,MAAO,CAAC,IAAK,IAAK,IAClBC,QAAS,CACLD,MAAO,CAAC,IAAK,IAAK,KAClBE,MAAO,IAmBXX,WAAYA,EACZH,cAAeA,IAEnBd,EAAK6B,SAASC,IAAIR,MA6Df,IAAMS,EAAa,SAACC,EAAWC,EAAoBC,GA6EtD,OA5EAlC,EAAKmC,MAAMC,GAAG,kBAAkB,SAACC,GACL,eAApBA,EAAMC,OAAO9C,KAEbyC,EAAmBI,EAAMC,OAAOjC,UAChC6B,GAAiB,EAAMG,EAAMC,OAAOjC,cAiE5CL,EAAKgC,UAAYA,EACjBhC,EACKuC,OACAtD,MAAK,SAAAuD,OAGLC,MAAMhD,GACJ,WACHO,EAAKgC,UAAY","file":"static/js/115.5bfc7445.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 1202;","\nimport WebMap from \"@arcgis/core/WebMap\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport Graphic from \"@arcgis/core/Graphic\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\nimport esriConfig from \"@arcgis/core/config\";\nimport TimeSlider from \"@arcgis/core/widgets/TimeSlider\";\n\nconst HYDROPHONES = [\n    { location: 'Slope Base', latitude: 44.5153, longitude: -125.39 },\n    { location: 'Axial Base', latitude: 45.8168, longitude: -129.754 },\n    { location: 'Southern Hydrate', latitude: 44.5691, longitude: -125.1479 },\n    { location: 'Central Caldera', latitude: 45.9546, longitude: -130.0089 },\n    { location: 'Eastern Caldera', latitude: 45.9396, longitude: -129.9738 },\n    // { location: 'Oregon Slope', latitude: 44.529, longitude: -125.3893 },\n    { location: 'Oregon Offshore', latitude: 44.3695, longitude: -124.954 },\n    { location: 'Oregon Shelf', latitude: 44.6371, longitude: -124.306 },\n]\n\nconst noop = () => { };\n\nesriConfig.apiKey = \"AAPK460c081ffc584c5090c2b383ede3366b1JA6FLMBYno7qMVVlHo12K6EOAtFnfYV_6UQH2_bUGzYM0qQIBxyfrSfrVF8mJM8\";\n\n// const AIS_extra_2015 = new FeatureLayer({\n//     url: \"https://services8.arcgis.com/7yPK7vytRf49nyPG/arcgis/rest/services/ais_2015_day_1/FeatureServer/0\"\n//   });\n\n// ******* create timeslider ********\nexport const webmap = new WebMap({\n    portalItem: {\n        id: \"aa1d3f80270146208328cf66d022e09c\",\n    },\n    basemap: \"arcgis-oceans\",\n    // layers: [AIS_extra_2015]\n});\n\nexport const view = new MapView({\n    map: webmap,\n    center: [-127, 45], //Longitude, latitude\n    zoom: 8\n});\n\n// AIS_extra_2015.renderer = {\n//     type: \"simple\",  // autocasts as new SimpleRenderer()\n//     symbol: {\n//         type: \"simple-marker\",  // autocasts as new SimpleMarkerSymbol()\n//         size: 2,\n//         color: [113, 15, 184],\n//         outline: {  // autocasts as new SimpleLineSymbol()\n//             width: 0.1,\n//             color: \"white\"\n//         }\n//     }\n// };\n\n// webmap.add(layer)\n\n// ********* from here, render the major components in map *********\nHYDROPHONES.forEach(element => {\n    const measureThisAction = {\n        title: \"Explore Data\",\n        id: \"show_popup\",\n        location: element.location\n    };\n\n    const point = {\n        type: \"point\",\n        longitude: element[\"longitude\"],\n        latitude: element[\"latitude\"]\n    };\n    const simpleMarkerSymbol = {\n        type: \"simple-marker\",\n        color: [226, 119, 40],  // Orange\n        outline: {\n            color: [255, 255, 255], // White\n            width: 1\n        }\n    };\n\n    const popupTemplate = {\n        title: \"{Name}\",\n        content: \"<div>Latitude: {Lat}, Longitude: {Lon}</div>\",\n        actions: [measureThisAction]\n    }\n    const attributes = {\n        Name: element.location,\n        Lat: element.latitude,\n        Lon: element.longitude,\n        Description: \"I am a hydrophone\"\n    }\n\n    const pointGraphic = new Graphic({\n        geometry: point,\n        symbol: simpleMarkerSymbol,\n        attributes: attributes,\n        popupTemplate: popupTemplate\n    });\n    view.graphics.add(pointGraphic);\n});\n\n\n// const polygon = {\n//     type: \"polygon\",\n//     rings: [\n//         [-132.79, 47.750],\n//         [-127, 47.750],\n//         [-127, 43.93],\n//         [-132.79, 43.93],\n//     ]\n// };\n\n\n// const simpleFillSymbol = {\n//     type: \"simple-fill\",\n//     color: [50,100,200,.15],\n//     outline: {\n//         color: [129, 9, 176],\n//         width: 1\n//     }\n// };\n\n// const polygonGraphic = new Graphic({\n//     geometry: polygon,\n//     symbol: simpleFillSymbol\n// });\n\n// view.graphics.add(polygonGraphic);\n\n\n\n// const polygon2 = {\n//     type: \"polygon\",\n//     rings: [\n//         [-128, 46.37],\n//         [-122, 46.44],\n//         [-122, 42.57],\n//         [-128, 42.57],\n//     ]\n// };\n\n// const simpleFillSymbol2 = {\n//     type: \"simple-fill\",\n//     color: [50,100,200,.15],\n//     outline: {\n//         color: [129, 9, 176],\n//         width: 1\n//     }\n// };\n\n// const polygonGraphic2 = new Graphic({\n//     geometry: polygon2,\n//     symbol: simpleFillSymbol2\n// });\n\n// view.graphics.add(polygonGraphic2);\n\n\n\nexport const initialize = (container, setCurrentLocation, handleOpenDialog) => {\n    view.popup.on(\"trigger-action\", (event) => {\n        if (event.action.id === \"show_popup\")\n        {\n            setCurrentLocation(event.action.location)\n            handleOpenDialog(true, event.action.location)\n        }\n    });\n\n    let timeSlider;\n\n    // TimeSlider.getPropertiesFromWebMap(webmap).then(\n    //     (timeSliderSettings) => {\n    //         const timeSliderDiv = document.createElement(\"div\");\n    //         timeSliderDiv.id = \"timeSliderDiv\";\n    //         timeSliderDiv.style.width = \"800px\";\n    //         timeSlider = new TimeSlider({\n    //             ...timeSliderSettings, // imported settings from webmap\n    //             view: view,\n    //                 //     container: \"timeSlider\",\n    //             container: 'timeSlider',\n    //             fullTimeExtent: {\n    //                 start: new Date(Date.UTC(2015, 0, 1, 0)),\n    //                 end: new Date(Date.UTC(2015, 0, 1, 23))\n    //             },\n    //         });\n    //         view.whenLayerView(AIS_extra_2015).then((lv) => {\n    //             // around up the full time extent to full hour\n    //             timeSlider.fullTimeExtent =\n    //             AIS_extra_2015.timeInfo.fullTimeExtent.expandTo(\"hours\");\n    //         });\n    //         // view.whenLayerView(AIS_extra_2015).then((lv) => {\n    //         //     timeSlider.timeExtent = {\n    //         //         start: new Date(Date.UTC(2015, 0, 1, 4)),\n    //         //         end: new Date(Date.UTC(2015, 0, 1, 6))\n    //         //     };\n\n    //         //     timeSlider.stops = {\n    //         //         interval: AIS_extra_2015.timeInfo.interval\n    //         //     };\n    //         // });\n    //         view.ui.add(timeSlider, \"bottom-left\");\n    //     }\n    // );\n\n    // const timeSlider = new TimeSlider({\n    //     container: \"timeSlider\",\n    //     view: view,\n    //     timeVisible: true, // show the time stamps on the timeslider\n    //     // loop: true\n    // });\n\n\n    // view.whenLayerView(AIS_extra_2015).then((lv) => {\n    //     // around up the full time extent to full hour\n    //     timeSlider.fullTimeExtent = {\n    //         start: new Date(Date.UTC(2015, 0, 1, 0)),\n    //         end: new Date(Date.UTC(2015, 0, 1, 23))\n    //     };\n    //     timeSlider.timeExtent = {\n    //         start: new Date(Date.UTC(2015, 0, 1, 4)),\n    //         end: new Date(Date.UTC(2015, 0, 1, 6))\n    //     };\n\n    //     timeSlider.stops = {\n    //         interval: AIS_extra_2015.timeInfo.interval\n    //     };\n    // });\n\n\n    view.container = container;\n    view\n        .when()\n        .then(_ => {\n            // console.log(\"Map and View are ready\");\n        })\n        .catch(noop);\n    return () => {\n        view.container = null;\n    };\n};\n"],"sourceRoot":""}