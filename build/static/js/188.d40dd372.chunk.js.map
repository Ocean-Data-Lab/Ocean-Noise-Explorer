{"version":3,"sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["O","e","t","s","fromJSON","pixelBlock","o","u","type","Promise","resolve","r","toJSON","a","data","options","extent","x","this","symbolizer","symbolize","h","symbolizerJSON","histograms","rendererJSON","simpleStretch","srcPixelBlock","stretchParams","p","i","tileSize","maximumPyramidLevel","forEach","set","srcPixelBlocks","map","srcMosaicSize","blockWidths","alignmentInfo","clipOffset","clipSize","l","coefs","n","destDimension","sampleSpacing","interpolation","projectDirections","gcsGrid","m","d","isUV","localNorthDirections","Float32Array","flowData","buffer","mask","Uint8Array","maskBuffer","width","height","y","meshType","simulationSettings","signal","vertexData","indexData","result","vertexBuffer","indexBuffer","transferList","projectedExtent","srcBufferExtent","datumTransformationSteps","steps","includeGCSGrid","spatialReference","c","rasterTransform","S","f","datumTransformation"],"mappings":"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","file":"static/js/188.d40dd372.chunk.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import{isSome as r,unwrap as e}from\"../../core/maybe.js\";import t from\"../../geometry/support/GeographicTransformation.js\";import s from\"./PixelBlock.js\";import{decode as o}from\"./rasterFormats/RasterCodec.js\";import{split as i,mosaic as a,approximateTransform as n,getLocalArithmeticNorthRotations as m}from\"./rasterFunctions/pixelUtils.js\";import{requirePE as l,load as c,getProjectionOffsetGrid as f}from\"./rasterFunctions/rasterProjectionHelper.js\";import{estimateStatisticsHistograms as p}from\"./rasterFunctions/stretchUtils.js\";import{convertVectorFieldData as u,convertToLocalDirections as d}from\"./rasterFunctions/vectorFieldUtils.js\";import{readTransform as S}from\"./rasterTransforms/utils.js\";import h from\"../../renderers/support/RasterSymbolizer.js\";import{createFlowMesh as y}from\"../../views/2d/engine/flow/dataUtils.js\";import x from\"../../geometry/Extent.js\";class O{convertVectorFieldData(e){const t=s.fromJSON(e.pixelBlock),o=u(t,e.type);return Promise.resolve(r(o)&&o.toJSON())}async decode(r){const e=await o(r.data,r.options);return e&&e.toJSON()}symbolize(e){e.pixelBlock=s.fromJSON(e.pixelBlock),e.extent=e.extent?x.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(r(t)&&t.toJSON())}async updateSymbolizer(r){this.symbolizer=h.fromJSON(r.symbolizerJSON),r.histograms&&\"rasterStretch\"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(s.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r(t)&&t.toJSON())}estimateStatisticsHistograms(r){const e=p(s.fromJSON(r.srcPixelBlock));return Promise.resolve(e)}split(r){const e=i(s.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return e&&e.forEach(((r,t)=>{e.set(t,r?.toJSON())})),Promise.resolve(e)}async mosaicAndTransform(r){const t=r.srcPixelBlocks.map((r=>r?new s(r):null)),o=a(t,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let i,l=o;return r.coefs&&(l=n(o,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(i=m(r.destDimension,r.gcsGrid),l=e(d(l,r.isUV?\"vector-uv\":\"vector-magdir\",i))),{pixelBlock:l?.toJSON(),localNorthDirections:i}}async createFlowMesh(r,e){const t={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:s,indexData:o}=await y(r.meshType,r.simulationSettings,t,e.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(r){const e=x.fromJSON(r.projectedExtent),s=x.fromJSON(r.srcBufferExtent);let o=null;r.datumTransformationSteps&&(o=new t({steps:r.datumTransformationSteps})),(r.includeGCSGrid||l(e.spatialReference,s.spatialReference,o))&&await c();const i=r.rasterTransform?S(r.rasterTransform):null;return f({...r,projectedExtent:e,srcBufferExtent:s,datumTransformation:o,rasterTransform:i})}}export{O as default};\n"],"sourceRoot":""}