{"version":3,"sources":["app/components/DatePicker/SpecDatePicker.jsx","app/components/Accordion/Accordion.jsx","app/components/Download/DownloadCsv.jsx","app/components/Download/DownloadPng.jsx","app/views/GraphCollection/Spectrogram.jsx","app/components/DatePicker/CTDDatePicker.jsx","app/components/DatePicker/SingleDatePicker.jsx","app/views/GraphCollection/CTD.jsx","app/components/DatePicker/MeteDatePicker.jsx","app/views/GraphCollection/MeteGraph.jsx","app/views/GraphCollection/Broadband.jsx","app/views/CRUD/GraphDialog.jsx","app/views/map/map.jsx","app/views/dashboard/Analytics2.jsx","app/utils/utils.js","app/components/Typography.js"],"names":["DateBox","styled","Box","theme","display","height","marginBottom","flexDirection","position","RangePicker","DatePicker","SpecDatePicker","startDate","endDate","setStartDate","setEndDate","style","width","size","showTime","hideDisabledOptions","defaultValue","moment","value","format","onCalendarChange","dates","dateStrings","info","futureMonth","add","disabledDate","current","allowClear","StyledAccordion","Accordion","minHeight","ButtonBox","marginTop","alignItems","cursor","AccordionDescrip","selectedValue","currType","useRef","onClick","click","IconButton","sx","ml","fontWeight","color","borderRadius","mb","AccordionSummary","ref","id","maxHeight","AccordionDetails","mt","StyledButton","Button","marginRight","backgroundColor","breakpoints","down","fontSize","DownloadCsv","error","location","frequency","setLoading","currentLocation","loading","meteGrahphType","removeFirstZeroInString","str","charAt","slice","processDateForWindRain","dataString","dataLst","split","year","month","date","disabled","variant","component","console","log","axios","post","responseType","then","res","data","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","mr","DownloadPng","image","name","ctdType","ctdRightDate","outputName","handleOutputName","linkSource","downloadLink","download","method","fileDownload","flexWrap","FlexBox","justifyContent","IMG","specValid","Spectrogram","useState","graphType","setGraphType","setFrequency","avg_time","setAvgTime","nperseg","setNperseg","overlap","setOverlap","setImage","setCurrType","locType","dispatch","useDispatch","initSpecGraph","useSelector","state","graph","getApiLocation","fetchSpecData","a","getInitialGraph","checkFrequecy","checkAvgTime","checkRelValues","checkNperseg","checkOverlap","useEffect","includes","Object","keys","length","outer","getElementById","el","Bokeh","embed","embed_item","remove","image64","Grid","item","lg","md","sm","xs","pt","FormControl","fullWidth","InputLabel","Select","labelId","label","onChange","event","target","MenuItem","TextField","helperText","required","container","p","pb","getSTUpdatedGraph","getUpdatedGraph","substring","textAlign","CircularProgress","className","src","overflow","React","memo","CTDDatePicker","dateFormat","SingleDatePicker","setRightPanelDate","ctdValid","CTD","setCtdType","initCtpGraph","initCtpGraphLine","rightPanelDate","fetchCTPData","getCTPInitialGraph","fetchCTDLineData","getCTPInitialGraphLine","outer3","el3","newEndDate","clsx","MeteDatePicker","start","end","isBefore","isAfter","MeteGraph","setMeteGrahphType","meteWindSpeedType","setmeteWindSpeedType","initWindRainGraph","fetchWindRainData","getWindRainGraph","broadValid","doubleValid","setLocType","ChartHeader","zIndex","padding","borderBottom","convertHexToRGB","palette","text","AnalyticsRoot","Card","StyledH3","lineHeight","obsValid","meteorologyValid","GraphDialog","open","handleClose","textPrimary","useTheme","primary","setSelectedValue","handleRadioChange","controlProps","checked","inputProps","Backdrop","Icon","spacing","Radio","Broadband","StyledBox","margin","TimeSliderBox","left","right","bottom","WebMap","elementRef","graphList","shouldOpenEditorDialog","setShouldOpenEditorDialog","setCurrentLocation","handleOpenDialog","useCallback","_","cleanup","app","initialize","graphData","type","GET_INIT_GRAPH","payload","Analytics2","hex","c","match","join","test","replace","toLowerCase","textTransformStyle","ellipsis","textTransform","whiteSpace","textOverflow","H1","children","props","H4","Paragraph","Span"],"mappings":"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","file":"static/js/102.d1ee80f5.chunk.js","sourcesContent":["import React from 'react'\nimport { DatePicker } from 'antd'\nimport { Box, styled } from '@mui/system'\nimport * as moment from 'moment'\n\nconst DateBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    height: '100%',\n    marginBottom: '-10px',\n    flexDirection: 'column',\n    position: 'relative',\n}))\n\nconst { RangePicker } = DatePicker\n\nconst SpecDatePicker = ({ startDate, endDate, setStartDate, setEndDate }) => {\n    const disabledDate = (current) => {\n        return (\n            current &&\n            (current < moment.utc([2015, 0, 14]) ||\n                current > moment.utc([2023, 12, 31]))\n        )\n    }\n\n    const handleCalendarChange = (dates, dateStrings, info) => {\n        // Set start date\n        setStartDate(dateStrings[0])\n\n        // If first item in dateStrings is different from startDate\n        if (dateStrings[0] !== startDate) {\n            // Add 1 month to end date\n            const futureMonth = moment(dateStrings[1]).add(1, 'M').add(24, 'H').add(60, 'minute')\n            // Set end date\n            setEndDate(futureMonth.format('YYYY-MM-DD HH:mm'))\n        }\n        // If second item in dateStrings is different from endDate\n        else if (dateStrings[1] !== endDate) {\n            // Set end date\n            setEndDate(dateStrings[1])\n        }\n    }\n\n    return (\n        <DateBox style={{ width: '100%' }}>\n            <RangePicker\n                size=\"large\"\n                showTime={{\n                    hideDisabledOptions: true,\n                }}\n                defaultValue={[moment(startDate), moment(endDate)]}\n                value={[moment(startDate), moment(endDate)]}\n                format={'YYYY-MM-DD HH:mm'}\n                onCalendarChange={handleCalendarChange}\n                disabledDate={disabledDate}\n                allowClear={false}\n            />\n        </DateBox>\n    )\n}\n\nexport default SpecDatePicker\n","import React, { useRef } from 'react'\nimport { IconButton } from '@mui/material'\nimport HelpIcon from '@mui/icons-material/Help'\nimport Accordion from '@mui/material/Accordion'\nimport AccordionSummary from '@mui/material/AccordionSummary'\nimport AccordionDetails from '@mui/material/AccordionDetails'\nimport { Paragraph } from 'app/components/Typography'\nimport { Box, styled } from '@mui/system'\nconst StyledAccordion = styled(Accordion)(() => ({\n    '& .MuiAccordionSummary-content': {\n        display: 'none',\n    },\n    '& .Mui-expanded': {\n        display: 'none',\n        height: 0,\n        minHeight: 0,\n    },\n}))\n\nconst ButtonBox = styled(Box)(() => ({\n    display: 'flex',\n    marginTop: '10px',\n    alignItems: 'center',\n    '&:hover': {\n        cursor: 'pointer',\n    },\n}))\n\nconst AccordionDescrip = ({ selectedValue, currType }) => {\n    const Accordion = useRef(null)\n    const handleAccordion = () => {\n        Accordion.current.click()\n    }\n\n    return (\n        <>\n            <ButtonBox onClick={handleAccordion}>\n                <IconButton>\n                    <HelpIcon />\n                </IconButton>\n                {selectedValue === 'Spec' && (\n                    <Paragraph sx={{ ml: '-2px', fontWeight: '400' }}>\n                        How is the {currType} graph generated?\n                    </Paragraph>\n                )}\n                {selectedValue === 'Broad' && (\n                    <Paragraph sx={{ ml: '-2px', fontWeight: '400' }}>\n                        How is the Broadband Spectrogram graph generated?\n                    </Paragraph>\n                )}\n                {selectedValue === 'CTD' && (\n                    <Paragraph sx={{ ml: '-2px', fontWeight: '400' }}>\n                        How is CTD generated?\n                    </Paragraph>\n                )}\n                {selectedValue === 'Mete' && (\n                    <Paragraph sx={{ ml: '-2px', fontWeight: '400' }}>\n                        How are wind Graph and rain graph generated?\n                    </Paragraph>\n                )}\n            </ButtonBox>\n            <StyledAccordion\n                sx={{\n                    color: 'success.main',\n                    '& .MuiSlider-thumb': {\n                        borderRadius: '1px',\n                    },\n                    mb: 3,\n                }}\n            >\n                <AccordionSummary\n                    aria-controls=\"panel1a-content\"\n                    ref={Accordion}\n                    id=\"panel1a-header\"\n                    sx={{\n                        height: 0,\n                        minHeight: 0,\n                        maxHeight: 0,\n                        '& .MuiSlider-thumb': {\n                            borderRadius: '1px',\n                        },\n                    }}\n                ></AccordionSummary>\n                <AccordionDetails sx={{ mt: -2 }}>\n                    {selectedValue === 'Spec' && currType === 'Spectrogram' && (\n                        <Paragraph sx={{ color: '#696665' }}>\n                            Low frequency spectrograms are pre-computed and saved locally. This method is best for looking at long time frames (like months or years). The spectrograms are calculated using a 1 hour Welch-median PSD estimate. The Welch estimate uses a Hann window, 1024 FFT points and 50 % overlap.\n                        </Paragraph>\n                    )}\n\n                    {selectedValue === 'Spec' && currType === 'ST Spectrogram' && (\n                        <Paragraph sx={{ color: '#696665' }}>\n                            Short Term Spectrograms are generated by pulling the specific time-series data from the OOI server and computing the spectrogram. This allows the user to specify the input parameters to the Welch PSD estimate, but is limited to smaller time frames (like days or hours).\n                        </Paragraph>\n                    )}\n\n                    {selectedValue === 'Broad' && currType === 'Broadband' && (\n                        <Paragraph sx={{ color: '#696665' }}>\n                            Broadband spectrograms are computed by downloading the data from the OOI server and computing the spectrogram locally. The data is downloaded using the python package OOIPY. The input parameters for the Welch PSD estimate can be provided by the user. Because the broadband hydrophone data takes up a lot of memory (1.8 GB per hour), this method is only suitable for short durations of data (like minutes and seconds).\n                        </Paragraph>\n                    )}\n\n                    {selectedValue === 'Spec' && currType === 'OBS' && (\n                        <Paragraph sx={{ color: '#696665' }}>\n                            The OBS data is from the z-channel of the OBS. the spectrograms are pre-computed and saved locally. This allows for the longer term data to be visualized. The spectrograms are calculated using a 1 hour Welch-median PSD estimate. The Welch estimate uses a Hann window, 1024 FFT points and 50 % overlap.\n                        </Paragraph>\n                    )}\n\n                    {selectedValue === 'Spec' && currType === 'SPDF' && (\n                        <Paragraph sx={{ color: '#696665' }}>\n                            SPDFs are calculated from the long-term spectrograms\n                            by computing histograms for each frequency bin.\n                            Plotting the histogram values as a function of\n                            frequency and spectral level gives the desired\n                            SPDFs.\n                        </Paragraph>\n                    )}\n\n                    {selectedValue === 'Spec' && currType === 'Octave Band' && (\n                        <Paragraph sx={{ color: '#696665' }}>\n                            The boxes of the plot are generated by using the\n                            minimum, first quartile value(lower line), median,\n                            third quartile value(upper line), maximum.\n                            Outliers(values that are above the upper line and\n                            below the lower line are hidden)\n                        </Paragraph>\n                    )}\n\n                    {selectedValue === 'Mete' && (\n                        <Paragraph sx={{ color: '#696665' }}>\n                            Wind Graph (at zero degree, wind direction is\n                            eastward): <br></br>\n                            1. If \"Wind Magnitude\" is selected, the wind speed\n                            is calculated throught the following formula:\n                            <br></br>\n                            wind magnitude = np.sqrt((eastward_wind_velocity)**2\n                            + (northward_wind_velocity)**2)<br></br>\n                            2. If \"Wind Angle\" is selected, the wind speed is\n                            calculated throught the following formula:<br></br>\n                            wind angle = np.arctan2(northward_wind_velocity,\n                            eastward_wind_velocity)<br></br>\n                            <br></br>\n                            Rain Graph: <br></br>\n                            for the precipitation rate, two major operations are\n                            performed:<br></br>\n                            1. Time frames where sampling period changes are\n                            removed<br></br>\n                            2. Siphoning events are removed<br></br>\n                        </Paragraph>\n                    )}\n\n                    <br />\n\n                    <Paragraph sx={{ color: '#696665' }}></Paragraph>\n                </AccordionDetails>\n            </StyledAccordion>\n        </>\n    )\n}\n\nexport default AccordionDescrip\n","import React, { Fragment } from 'react'\nimport axios from 'axios'\nimport { Button } from '@mui/material'\nimport { styled } from '@mui/system'\nimport DownloadIcon from '@mui/icons-material/Download'\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n    width: '150px',\n    marginRight: '10px',\n    backgroundColor: '#008255',\n    marginBottom: '10px',\n    [theme.breakpoints.down('sm')]: {\n        fontSize: '12px',\n    },\n}))\n\nconst DownloadCsv = ({\n    error,\n    startDate,\n    endDate,\n    location,\n    frequency,\n    currType,\n    setLoading,\n    currentLocation,\n    selectedValue,\n    loading,\n    meteGrahphType,\n}) => {\n    const removeFirstZeroInString = (str) => {\n        if (str.charAt(0) === '0') {\n            str = str.slice(1)\n        }\n        return str\n    }\n\n    const processDateForWindRain = (dataString) => {\n        let dataLst = dataString.split('-')\n        return {\n            year: dataLst[0],\n            month: removeFirstZeroInString(dataLst[1]),\n            date: removeFirstZeroInString(dataLst[2]),\n        }\n    }\n\n    const downloadCSV = () => {\n        setLoading(true)\n\n        if (\n            (meteGrahphType === 'WindSpeed' || meteGrahphType === 'RainRate') &&\n            (location === 'oregon_shelf' || location === 'oregon_offshore')\n        ) {\n            startDate = processDateForWindRain(startDate)\n            endDate = processDateForWindRain(endDate)\n        }\n\n        console.log('meteGrahphType', meteGrahphType)\n        axios\n            .post(\n                '/api/downloads',\n                {\n                    startDate,\n                    endDate,\n                    location,\n                    currType,\n                    frequency,\n                    selectedValue,\n                    meteGrahphType,\n                },\n                { responseType: 'blob' }\n            )\n            .then((res) => {\n                console.log('res data', res.data)\n                const url = window.URL.createObjectURL(new Blob([res.data]))\n                const link = document.createElement('a')\n                link.href = url\n\n                link.setAttribute(\n                    'download',\n                    currType +\n                        '_' +\n                        location +\n                        '-_' +\n                        startDate +\n                        '-_' +\n                        endDate +\n                        '.csv'\n                )\n\n                document.body.appendChild(link)\n                link.click()\n                setLoading(false)\n            })\n    }\n\n    return (\n        <Fragment>\n            <StyledButton\n                disabled={error === 'error' || loading ? true : false}\n                variant=\"contained\"\n                component=\"span\"\n                onClick={downloadCSV}\n                sx={{ backgroundColor: '#008255' }}\n            >\n                <DownloadIcon sx={{ mr: 1 }} />\n                CSV\n            </StyledButton>\n        </Fragment>\n    )\n}\n\nexport default DownloadCsv\n","import React from 'react'\nimport DownloadIcon from '@mui/icons-material/Download'\nimport { Button } from '@mui/material'\nimport { styled } from '@mui/system'\nimport { handleOutputName } from 'app/utils/utils'\nimport axios from 'axios'\nimport fileDownload from 'js-file-download'\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n    width: '150px',\n    marginRight: '10px',\n    marginBottom: '10px',\n    backgroundColor: '#008255',\n    [theme.breakpoints.down('sm')]: {\n        fontSize: '12px',\n    },\n}))\n\nconst DownloadPng = ({\n    currType,\n    image,\n    loading,\n    setLoading,\n    startDate,\n    endDate,\n    location,\n    frequency,\n    selectedValue,\n    name,\n    ctdType,\n    ctdRightDate,\n    meteGrahphType,\n}) => {\n    const outputName = handleOutputName(\n        location,\n        startDate,\n        endDate,\n        selectedValue\n    )\n\n    const removeFirstZeroInString = (str) => {\n        if (str.charAt(0) === '0') {\n            str = str.slice(1)\n        }\n        return str\n    }\n\n    const processDateForWindRain = (dataString) => {\n        let dataLst = dataString.split('-')\n        return {\n            year: dataLst[0],\n            month: removeFirstZeroInString(dataLst[1]),\n            date: removeFirstZeroInString(dataLst[2]),\n        }\n    }\n\n    const DownloadPNG = () => {\n        if (currType === 'SPDF') {\n            const linkSource = `data:image/jpeg;base64,${image}`\n            const downloadLink = document.createElement('a')\n            downloadLink.href = linkSource\n            downloadLink.download = `${outputName}.png`\n            downloadLink.click()\n        } else {\n            if (selectedValue === 'CTD') {\n                currType = 'CTD'\n            }\n            setLoading(true)\n\n            if (location === 'oregon_shelf' || location === 'oregon_offshore') {\n                startDate = processDateForWindRain(startDate)\n                endDate = processDateForWindRain(endDate)\n            }\n\n            axios({\n                method: 'post',\n                url: '/api/downloadPng',\n                responseType: 'blob',\n                data: {\n                    startDate,\n                    endDate,\n                    location,\n                    currType,\n                    frequency,\n                    ctdType,\n                    ctdRightDate,\n                    meteGrahphType,\n                },\n            }).then((res) => {\n                setLoading(false)\n                fileDownload(res.data, `${outputName}.png`)\n            })\n        }\n    }\n\n    return (\n        <StyledButton\n            variant=\"contained\"\n            disabled={loading === true}\n            // disabled={true}\n            onClick={DownloadPNG}\n        >\n            <DownloadIcon sx={{ mr: 1 }} />\n            {name}\n        </StyledButton>\n    )\n}\n\nexport default DownloadPng\n","import React, { useEffect, useState } from 'react'\nimport { Grid, Button } from '@mui/material'\nimport SpecDatePicker from 'app/components/DatePicker/SpecDatePicker'\nimport { Box, styled } from '@mui/system'\nimport {\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    CircularProgress,\n} from '@mui/material'\nimport { getInitialGraph } from 'app/redux/actions/GraphActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getApiLocation } from '../../utils/utils'\nimport AccordionDescrip from 'app/components/Accordion/Accordion'\nimport { getUpdatedGraph } from 'app/redux/actions/GraphActions'\nimport { getSTUpdatedGraph } from 'app/redux/actions/GraphActions'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport DownloadCsv from 'app/components/Download/DownloadCsv'\nimport DownloadPng from 'app/components/Download/DownloadPng'\n\nconst ButtonBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    marginTop: '-10px',\n    '&:hover': {\n        cursor: 'pointer',\n    },\n}))\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n    width: '150px',\n    marginRight: '10px',\n    marginBottom: '10px',\n    backgroundColor: '#008255',\n    [theme.breakpoints.down('sm')]: {\n        fontSize: '12px',\n    },\n}))\n\nconst FlexBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    [theme.breakpoints.down('xl')]: {\n        justifyContent: 'flex-start',\n    },\n}))\n\nconst IMG = styled('img')(({ theme }) => ({\n    borderRadius: '4px',\n    [theme.breakpoints.down('sm')]: {\n        width: '110%',\n    },\n}))\nconst specValid = [\n    'Axial Base',\n    'Central Caldera',\n    'Eastern Caldera',\n    'Slope Base',\n    'Southern Hydrate',\n    'Axial Ashes',\n    'Axial International',\n]\n\n// OBS Data Valid Locations\n\nconst obsValid = [\n    'Axial Base',\n    'Slope Base',\n    'Eastern Caldera',\n    'Central Caldera',\n    'Axial Ashes',\n    'Axial International',\n    'Southern Hydrate',\n]\n\nconst Spectrogram = ({ currentLocation, selectedValue }) => {\n    const [startDate, setStartDate] = useState('2020-01-01T00:00')\n    const [endDate, setEndDate] = useState('2020-02-01T01:00:00')\n    const [graphType, setGraphType] = useState('Spectrogram')\n    const [frequency, setFrequency] = useState(50)\n    const [avg_time, setAvgTime] = useState(3600)\n    const [nperseg, setNperseg] = useState(1024)\n    const [overlap, setOverlap] = useState(50)\n    const [loading, setLoading] = useState(false)\n    const [image, setImage] = useState('')\n    const [currType, setCurrType] = useState('Spectrogram')\n    const [locType, setLocType] = useState('Seafloor')\n    const dispatch = useDispatch()\n    const { initSpecGraph } = useSelector((state) => state.graph)\n    const location = getApiLocation(currentLocation)\n\n\n    const handleUpdateGraph = () => {\n        setLoading(true)\n        setCurrType(graphType)\n        dispatch(\n            getUpdatedGraph(startDate, endDate, graphType, selectedValue, location, frequency)\n        )\n    }\n\n    const handleSTUpdateGraph = () => {\n        setLoading(true)\n        setCurrType(graphType)\n        dispatch(\n            getSTUpdatedGraph(startDate, endDate, graphType, location, locType, overlap, nperseg, avg_time)\n        )\n    }\n\n    const fetchSpecData = async () => {\n        await dispatch(getInitialGraph(startDate, endDate, location))\n    }\n\n    const handleTypeDropDown = (event) => {\n        setGraphType(event.target.value)\n    }\n\n    const checkFrequecy = () => {\n        if (frequency < 1 || frequency > 80) return true\n        return false\n    }\n\n    const checkAvgTime = () => {\n        if (avg_time < 1 || avg_time > 3600) return true\n        return false\n    }\n\n    const checkRelValues = () => {\n        if (avg_time*200 <= nperseg) return true\n        return false\n    }\n\n    const checkNperseg = () => {\n        if (nperseg < 1 || nperseg > 1024) return true\n        return false\n    }\n\n    const checkOverlap = () => {\n        if (overlap < 1 || overlap > 100) return true\n        return false\n    }\n\n    const handleFrequencyChange = (event) => {\n        setFrequency(event.target.value)\n    }\n\n    const handleAvgTimeChange = (event) => {\n        setAvgTime(event.target.value)\n    }\n\n    const handleNpersegChange = (event) => {\n        setNperseg(event.target.value)\n    }\n\n    const handleOverlapChange = (event) => {\n        setOverlap(event.target.value)\n    }\n\n    useEffect(() => {\n        if (specValid.includes(currentLocation)) fetchSpecData()\n    }, [currentLocation])\n\n    useEffect(() => {\n        if (currType === 'Spectrogram' || currType === 'Octave Band' || currType === 'ST Spectrogram') {\n            if (Object.keys(initSpecGraph).length !== 0) {\n                setLoading(false)\n                const outer = document.getElementById('outer')\n                const el = document.createElement('div')\n                el.setAttribute('id', 'graphBox')\n                outer.appendChild(el)\n                window.Bokeh.embed.embed_item(initSpecGraph, 'graphBox')\n                return () => {\n                    if (document.getElementById('graphBox')) {\n                        const h1 = document.getElementById('graphBox')\n                        h1.remove()\n                    }\n                }\n            }\n        } else if (currType === 'SPDF') {\n            setLoading(false)\n            let imageResult = initSpecGraph['image']\n            let image64 = imageResult.split(\"'\")[1]\n            setImage(image64)\n        }\n    }, [initSpecGraph])\n\n    return (\n        <>\n            {specValid.includes(currentLocation) && (\n                <Grid\n                    item\n                    lg={4}\n                    md={10}\n                    sm={12}\n                    xs={12}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    pt={0}\n                    sx={{ height: '70px' }}\n                >\n                    <SpecDatePicker\n                        startDate={startDate}\n                        endDate={endDate}\n                        setStartDate={setStartDate}\n                        setEndDate={setEndDate}\n                        // error={checkDates()}\n                        // helperText={\n                        //     checkDates() && 'Date range must be within 2 days'\n                        // }\n                    />\n                </Grid>\n            )}\n\n            {specValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <FormControl fullWidth sx={{ mb: 1, width: '100%' }}>\n                        <InputLabel id=\"demo-simple-select-label\">\n                            Type\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={graphType}\n                            label=\"Type\"\n                            defaultValue={'Spectrogram'}\n                            onChange={handleTypeDropDown}\n                        >\n                            <MenuItem value={'Spectrogram'}>\n                                Spectrogram\n                            </MenuItem>\n                            <MenuItem value={'ST Spectrogram'}>\n                                Short Term Spectrogram\n                            </MenuItem>\n                            <MenuItem value={'SPDF'}>SPDF</MenuItem>\n                            <MenuItem value={'Octave Band'}>\n                                Octave Band\n                            </MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            )}\n\n            {specValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <TextField\n                        error={checkFrequecy()}\n                        helperText={\n                            checkFrequecy() && 'Frequency not in valid range'\n                        }\n                        disabled={graphType === 'Octave Band' ? false : true}\n                        required\n                        value={frequency}\n                        id=\"outlined-required\"\n                        label=\"Required frequency 1-90\"\n                        onChange={handleFrequencyChange}\n                    />\n                </Grid>\n            )}\n\n            {specValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <TextField\n                        error={checkAvgTime() || checkRelValues()}\n                        helperText={\n                            (checkAvgTime() && 'Averaging Time not in valid range') ||\n                            (checkRelValues() && 'Avg Time x 200 > nperseg not met')\n                        }\n                        disabled={graphType === 'ST Spectrogram' ? false : true}\n                        required\n                        value={avg_time}\n                        id=\"outlined-required\"\n                        label=\"Averaging Time (in secs) : 1-3600\"\n                        onChange={handleAvgTimeChange}\n                    />\n                </Grid>\n            )}\n\n            {specValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <TextField\n                        error={checkNperseg()}\n                        helperText={\n                            checkNperseg() && 'Nperseg not in valid range'\n                        }\n                        disabled={graphType === 'ST Spectrogram' ? false : true}\n                        required\n                        value={nperseg}\n                        id=\"outlined-required\"\n                        label=\"Nperseg : 1-1024\"\n                        onChange={handleNpersegChange}\n                    />\n                </Grid>\n            )}\n\n            {specValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <TextField\n                        error={checkOverlap()}\n                        helperText={\n                            checkOverlap() && 'Overlap not in valid range'\n                        }\n                        disabled={graphType === 'ST Spectrogram' ? false : true}\n                        required\n                        value={overlap}\n                        id=\"outlined-required\"\n                        label=\"Overlap : 1-100\"\n                        onChange={handleOverlapChange}\n                    />\n                </Grid>\n            )}\n\n            {specValid.includes(currentLocation) && (\n                <Grid container p={1} pt={3} pb={0}>\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <ButtonBox>\n                            <StyledButton\n                                disabled={checkFrequecy()}\n                                variant=\"contained\"\n                                component=\"span\"\n                                onClick={graphType === \"ST Spectrogram\" ? handleSTUpdateGraph : handleUpdateGraph}\n                            >\n                                <AutorenewIcon sx={{ mr: 1 }} />\n                                Update\n                            </StyledButton>\n\n                            <DownloadCsv\n                                loading={loading}\n                                startDate={startDate}\n                                endDate={endDate.substring(0, 10)}\n                                frequency={frequency}\n                                currType={currType}\n                                setLoading={setLoading}\n                                location={location}\n                                selectedValue={selectedValue}\n                                currentLocation={currentLocation}\n                            />\n\n                            <DownloadPng\n                                loading={loading}\n                                currType={currType}\n                                image={image}\n                                setLoading={setLoading}\n                                startDate={startDate}\n                                endDate={endDate}\n                                location={location}\n                                frequency={frequency}\n                                selectedValue={'Spec'}\n                                name={'PNG'}\n                                ctdType=\"left\"\n                            />\n                        </ButtonBox>\n\n                        <AccordionDescrip\n                            selectedValue={'Spec'}\n                            currType={currType}\n                        />\n                    </Grid>\n                </Grid>\n            )}\n\n            <Grid container>\n                {loading && (\n                    <Grid\n                        item\n                        lg={12}\n                        md={12}\n                        sm={12}\n                        xs={12}\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        textAlign=\"center\"\n                        mb=\"20px\"\n                    >\n                        <CircularProgress\n                            size={24}\n                            className=\"buttonProgress\"\n                        />\n                    </Grid>\n                )}\n                {currType === 'SPDF' && image !== '' && (\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <FlexBox>\n                            <IMG src={`data:image/jpg;base64,${image}`} />\n                        </FlexBox>\n                    </Grid>\n                )}\n            </Grid>\n\n            <Grid container>\n                <Grid item lg={12} md={12} sm={12} xs={12}>\n                    <FlexBox style={{ overflow: 'auto' }}>\n                        <Box id=\"outer\"></Box>\n                    </FlexBox>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nexport default React.memo(Spectrogram)\n","import React from 'react'\nimport { DatePicker } from 'antd'\nimport { Box, styled } from '@mui/system'\nimport * as moment from 'moment'\n\nconst DateBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    height: '100%',\n    marginBottom: '-10px',\n    flexDirection: 'column',\n    position: 'relative',\n}))\n\nconst { RangePicker } = DatePicker\n\nconst CTDDatePicker = ({ startDate, endDate, setStartDate, setEndDate }) => {\n    const disabledDate = (current) => {\n        return (\n            current &&\n            (current < moment.utc([2015, 0, 1]) ||\n                current > moment.utc([2022, 0, 2]))\n        )\n    }\n\n    const handleCalendarChange = (dates, dateStrings, info) => {\n        // Set start date\n        setStartDate(dateStrings[0])\n\n        // If first item in dateStrings is different from startDate\n        if (dateStrings[0] !== startDate) {\n            // Add 1 month to end date\n            const futureMonth = moment(dateStrings[1]).add(1, 'M')\n            // Set end date\n            setEndDate(futureMonth.format('YYYY-MM-DD'))\n        }\n        // If second item in dateStrings is different from endDate\n        else if (dateStrings[1] !== endDate) {\n            // Set end date\n            setEndDate(dateStrings[1])\n        }\n    }\n\n    return (\n        <DateBox style={{ width: '100%' }}>\n            <RangePicker\n                size=\"large\"\n                showTime={{\n                    hideDisabledOptions: true,\n                }}\n                defaultValue={[moment(startDate), moment(endDate)]}\n                value={[moment(startDate), moment(endDate)]}\n                format={'YYYY-MM-DD'}\n                onCalendarChange={handleCalendarChange}\n                disabledDate={disabledDate}\n                allowClear={false}\n            />\n        </DateBox>\n    )\n}\n\nexport default CTDDatePicker\n","import React from 'react';\nimport { DatePicker } from 'antd'\nimport { Box, styled } from '@mui/system'\nimport * as moment from 'moment'\n\nconst DateBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    height: '100%',\n    marginBottom: '-10px',\n    flexDirection: 'column',\n    position: 'relative',\n    '& .ant-picker-input input': {\n        fontSize: '17px !important'\n    }\n}))\n\nconst dateFormat = 'YYYY-MM-DD';\n\nconst SingleDatePicker = ({setRightPanelDate}) => {\n    const disabledDate = (current) => {\n        return (\n            current &&\n            (current < moment.utc([2015, 0, 1]) ||\n            current > moment.utc([2022, 0, 2]))\n        )\n    }\n\n    const handleDateChange = (dateStrings) => {\n        if (dateStrings)\n        {\n            setRightPanelDate(dateStrings);\n        }\n    }\n    return (\n        <DateBox style={{ width: '100%'}}>\n            <DatePicker\n                disabledDate={disabledDate}\n                defaultValue={moment('2015/01/01', dateFormat)}\n                format={dateFormat}\n                style={{ height: '45px' }}\n                onChange={handleDateChange}\n            />\n        </DateBox>\n    )\n}\n\nexport default SingleDatePicker\n","import React, { useEffect, useState } from 'react'\nimport { Grid, Button } from '@mui/material'\nimport CTDDatePicker from 'app/components/DatePicker/CTDDatePicker'\nimport { Box, styled } from '@mui/system'\nimport clsx from 'clsx'\nimport {\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    CircularProgress,\n} from '@mui/material'\nimport {\n    getCTPInitialGraph,\n    getCTPInitialGraphLine,\n} from 'app/redux/actions/GraphActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getApiLocation } from '../../utils/utils'\nimport AccordionDescrip from 'app/components/Accordion/Accordion'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport DownloadCsv from 'app/components/Download/DownloadCsv'\nimport DownloadPng from 'app/components/Download/DownloadPng'\nimport SingleDatePicker from 'app/components/DatePicker/SingleDatePicker'\n\nconst ButtonBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    marginTop: '-10px',\n    '&:hover': {\n        cursor: 'pointer',\n    },\n}))\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n    width: '150px',\n    marginRight: '10px',\n    marginBottom: '10px',\n    backgroundColor: '#008255',\n    [theme.breakpoints.down('sm')]: {\n        fontSize: '12px',\n    },\n}))\n\nconst FlexBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}))\n\nconst ctdValid = [\n    'Oregon Offshore',\n    'Oregon Slope',\n    'Oregon Shelf',\n    'Axial Base',\n]\n\nconst CTD = ({ currentLocation, selectedValue }) => {\n    const [startDate, setStartDate] = useState('2020-01-01')\n    const [endDate, setEndDate] = useState('2020-02-02')\n    const [loading, setLoading] = useState(false)\n    const [currType, setCurrType] = useState('CTD')\n    const location = getApiLocation(currentLocation)\n    const [ctdType, setCtdType] = useState('Longterm')\n    const { initCtpGraph } = useSelector((state) => state.graph)\n    const { initCtpGraphLine } = useSelector((state) => state.graph)\n    const [rightPanelDate, setRightPanelDate] = useState('2015-01-01')\n    const dispatch = useDispatch()\n\n    const handleUpdateGraph = () => {\n        setLoading(true)\n        if (selectedValue === 'CTD' && ctdType === 'Longterm') {\n            const newEndDate = endDate.substring(0, 10)\n            dispatch(getCTPInitialGraph(location, startDate, newEndDate))\n        } else if (selectedValue === 'CTD' && ctdType === 'Shortterm') {\n            dispatch(getCTPInitialGraphLine(location, rightPanelDate))\n        }\n    }\n\n    const fetchCTPData = async () => {\n        await dispatch(getCTPInitialGraph(location, startDate, endDate))\n    }\n\n    const fetchCTDLineData = async () => {\n        await dispatch(getCTPInitialGraphLine(location, '2015-01-01'))\n    }\n\n    const handleTypeDropDown = (event) => {\n        setCtdType(event.target.value)\n    }\n\n    useEffect(() => {\n        if (ctdValid.includes(currentLocation)) {\n            setLoading(true)\n            fetchCTPData()\n            fetchCTDLineData()\n        }\n    }, [currentLocation])\n\n    useEffect(() => {\n        if (Object.keys(initCtpGraph).length !== 0) {\n            // embed CTD left graph\n            const outer = document.getElementById('outer2')\n            const el = document.createElement('div')\n            el.setAttribute('id', 'graphBox2')\n            outer.appendChild(el)\n            window.Bokeh.embed.embed_item(initCtpGraph, 'graphBox2')\n            setLoading(false)\n            return () => {\n                if (document.getElementById('graphBox2')) {\n                    const h1 = document.getElementById('graphBox2')\n                    h1.remove()\n                }\n            }\n        }\n    }, [initCtpGraph])\n\n    useEffect(() => {\n        if (Object.keys(initCtpGraphLine).length !== 0) {\n            // // embed CTD right graph\n            const outer3 = document.getElementById('outer3')\n            const el3 = document.createElement('div')\n            el3.setAttribute('id', 'graphBox3')\n            outer3.appendChild(el3)\n            window.Bokeh.embed.embed_item(initCtpGraphLine, 'graphBox3')\n\n            setLoading(false)\n            return () => {\n                if (document.getElementById('graphBox3')) {\n                    const h1 = document.getElementById('graphBox3')\n                    h1.remove()\n                }\n            }\n        }\n    }, [initCtpGraphLine])\n\n    return (\n        <>\n            {ctdValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <FormControl fullWidth sx={{ mb: 1, width: '100%' }}>\n                        <InputLabel id=\"demo-simple-select-label\">\n                            Type\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={ctdType}\n                            label=\"Type\"\n                            defaultValue={'Longterm'}\n                            onChange={handleTypeDropDown}\n                        >\n                            <MenuItem value={'Longterm'}>Long term</MenuItem>\n                            <MenuItem value={'Shortterm'}>Short term</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            )}\n\n            {ctdValid.includes(currentLocation) && ctdType === 'Longterm' && (\n                <Grid\n                    item\n                    lg={4}\n                    md={10}\n                    sm={12}\n                    xs={12}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    pt={0}\n                    sx={{ height: '70px' }}\n                >\n                    <CTDDatePicker\n                        startDate={startDate}\n                        endDate={endDate}\n                        setStartDate={setStartDate}\n                        setEndDate={setEndDate}\n                    />\n                </Grid>\n            )}\n\n            {ctdType === 'Shortterm' && (\n                <>\n                    <Grid\n                        item\n                        lg={4}\n                        md={10}\n                        sm={12}\n                        xs={12}\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        pt={0}\n                        sx={{ height: '70px' }}\n                    >\n                        <SingleDatePicker\n                            setRightPanelDate={setRightPanelDate}\n                        />\n                    </Grid>\n                </>\n            )}\n\n            {ctdValid.includes(currentLocation) && (\n                <Grid container p={1} pt={3} pb={0}>\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <ButtonBox>\n                            <StyledButton\n                                variant=\"contained\"\n                                component=\"span\"\n                                onClick={handleUpdateGraph}\n                            >\n                                <AutorenewIcon sx={{ mr: 1 }} />\n                                Update\n                            </StyledButton>\n\n                            <DownloadCsv\n                                loading={loading}\n                                startDate={startDate}\n                                endDate={endDate.substring(0, 10)}\n                                currType={currType}\n                                setLoading={setLoading}\n                                location={location}\n                                selectedValue={selectedValue}\n                                currentLocation={currentLocation}\n                            />\n\n                            <DownloadPng\n                                loading={loading}\n                                currType={currType}\n                                setLoading={setLoading}\n                                startDate={startDate}\n                                endDate={endDate}\n                                location={location}\n                                selectedValue={'CTD'}\n                                name={'PNG'}\n                                ctdType=\"left\"\n                            />\n                        </ButtonBox>\n\n                        <AccordionDescrip\n                            selectedValue={'CTD'}\n                            currType={currType}\n                        />\n                    </Grid>\n                </Grid>\n            )}\n\n            <Grid container>\n                {loading && (\n                    <Grid\n                        item\n                        lg={12}\n                        md={12}\n                        sm={12}\n                        xs={12}\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        textAlign=\"center\"\n                        mb=\"20px\"\n                    >\n                        <CircularProgress\n                            size={24}\n                            className=\"buttonProgress\"\n                        />\n                    </Grid>\n                )}\n            </Grid>\n\n            <Grid container>\n                <Grid item lg={12} md={12} sm={12} xs={12}>\n                    <FlexBox>\n                        <Box\n                            id=\"outer2\"\n                            className={clsx(\n                                selectedValue === 'CTD' &&\n                                    ctdType === 'Longterm'\n                                    ? 'showGraph'\n                                    : 'hideGraph'\n                            )}\n                        ></Box>\n                        <Box\n                            id=\"outer3\"\n                            className={clsx(\n                                selectedValue === 'CTD' &&\n                                    ctdType === 'Shortterm'\n                                    ? 'showGraph'\n                                    : 'hideGraph'\n                            )}\n                        ></Box>\n                    </FlexBox>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nexport default React.memo(CTD)\n","import React from 'react'\nimport { DatePicker } from 'antd'\nimport { Box, styled } from '@mui/system'\nimport * as moment from 'moment'\n\nconst DateBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    height: '100%',\n    marginBottom: '-10px',\n    flexDirection: 'column',\n    position: 'relative',\n}))\n\nconst { RangePicker } = DatePicker\n\nconst MeteDatePicker = ({ startDate, endDate, setStartDate, setEndDate }) => {\n    const disabledDate = (current) => {\n        // Parse the start and end dates into moment objects\n        const start = moment('2015-05-01T00:00:00.000Z')\n        const end = moment('2022-10-25T12:00:00.000Z')\n\n        // Check if the current date is before the start date or after the end date\n        return current && (current.isBefore(start) || current.isAfter(end))\n    }\n\n    const handleCalendarChange = (dates, dateStrings, info) => {\n        // Set start date\n        setStartDate(dateStrings[0])\n\n        // If first item in dateStrings is different from startDate\n        if (dateStrings[0] !== startDate) {\n            // Add 1 month to end date\n            const futureMonth = moment(dateStrings[1]).add(1, 'M')\n            // Set end date\n            setEndDate(futureMonth.format('YYYY-MM-DD'))\n        }\n        // If second item in dateStrings is different from endDate\n        else if (dateStrings[1] !== endDate) {\n            // Set end date\n            setEndDate(dateStrings[1])\n        }\n    }\n\n    return (\n        <DateBox style={{ width: '100%' }}>\n            <RangePicker\n                size=\"large\"\n                showTime={{\n                    hideDisabledOptions: true,\n                }}\n                defaultValue={[moment(startDate), moment(endDate)]}\n                value={[moment(startDate), moment(endDate)]}\n                format={'YYYY-MM-DD'}\n                onCalendarChange={handleCalendarChange}\n                disabledDate={disabledDate}\n                allowClear={false}\n            />\n        </DateBox>\n    )\n}\n\nexport default MeteDatePicker\n","import React, { useEffect, useState } from 'react'\nimport { Grid, Button } from '@mui/material'\nimport MeteDatePicker from 'app/components/DatePicker/MeteDatePicker'\nimport { Box, styled } from '@mui/system'\nimport {\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    CircularProgress,\n} from '@mui/material'\nimport { getWindRainGraph } from 'app/redux/actions/GraphActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getApiLocation } from '../../utils/utils'\nimport AccordionDescrip from 'app/components/Accordion/Accordion'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport DownloadCsv from 'app/components/Download/DownloadCsv'\nimport DownloadPng from 'app/components/Download/DownloadPng'\n\nconst ButtonBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    marginTop: '-10px',\n    '&:hover': {\n        cursor: 'pointer',\n    },\n}))\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n    width: '150px',\n    marginRight: '10px',\n    marginBottom: '10px',\n    backgroundColor: '#008255',\n    [theme.breakpoints.down('sm')]: {\n        fontSize: '12px',\n    },\n}))\n\nconst FlexBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    [theme.breakpoints.down('xl')]: {\n        justifyContent: 'flex-start',\n    },\n}))\n\nconst MeteGraph = ({ currentLocation, selectedValue }) => {\n    const [startDate, setStartDate] = useState('2020-01-01')\n    const [endDate, setEndDate] = useState('2020-02-02')\n    const [frequency, setFrequency] = useState(50)\n    const [loading, setLoading] = useState(false)\n    const [image, setImage] = useState('')\n    const [meteGrahphType, setMeteGrahphType] = useState('WindSpeed')\n    const [meteWindSpeedType, setmeteWindSpeedType] = useState('WindMagnitude')\n    const dispatch = useDispatch()\n\n    const { initWindRainGraph } = useSelector((state) => state.graph)\n    const location = getApiLocation(currentLocation)\n\n    const handleUpdateGraph = () => {\n        setLoading(true)\n        fetchWindRainData()\n    }\n    const handleMeteTypeChange = (event) => {\n        setMeteGrahphType(event.target.value)\n    }\n\n    const removeFirstZeroInString = (str) => {\n        if (str.charAt(0) === '0') {\n            str = str.slice(1)\n        }\n        return str\n    }\n\n    // set type for wind speed\n    const handleWindSpeedTypeChange = (event) => {\n        setmeteWindSpeedType(event.target.value)\n    }\n\n    const processDateForWindRain = (dataString) => {\n        let dataLst = dataString.split('-')\n        return {\n            year: dataLst[0],\n            month: removeFirstZeroInString(dataLst[1]),\n            date: removeFirstZeroInString(dataLst[2]),\n        }\n    }\n\n    const fetchWindRainData = async () => {\n        let start = processDateForWindRain(startDate)\n        let end = processDateForWindRain(endDate)\n\n        await dispatch(\n            getWindRainGraph(\n                meteGrahphType,\n                start,\n                end,\n                currentLocation,\n                meteWindSpeedType\n            )\n        )\n    }\n\n    useEffect(() => {\n        setMeteGrahphType('WindSpeed')\n        setLoading(true)\n        fetchWindRainData()\n    }, [currentLocation])\n\n    useEffect(() => {\n        const outer = document.getElementById('outer4')\n        const el = document.createElement('div')\n        el.setAttribute('id', 'graphBox4')\n        outer.appendChild(el)\n        window.Bokeh.embed.embed_item(initWindRainGraph, 'graphBox4')\n        setLoading(false)\n        return () => {\n            if (document.getElementById('graphBox4')) {\n                const h1 = document.getElementById('graphBox4')\n                h1.remove()\n            }\n        }\n    }, [initWindRainGraph])\n\n    return (\n        <>\n            <Grid\n                item\n                lg={4}\n                md={10}\n                sm={12}\n                xs={12}\n                display=\"flex\"\n                alignItems=\"center\"\n                pt={0}\n                sx={{ height: '70px' }}\n            >\n                <MeteDatePicker\n                    startDate={startDate}\n                    endDate={endDate}\n                    setStartDate={setStartDate}\n                    setEndDate={setEndDate}\n                />\n            </Grid>\n\n            <Grid item lg={3} md={3} sm={6} xs={12}>\n                <FormControl fullWidth sx={{ mb: 1, width: '100%' }}>\n                    <InputLabel id=\"demo-simple-select-label\">Type</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={meteGrahphType}\n                        label=\"Type\"\n                        defaultValue={'WindSpeed'}\n                        onChange={handleMeteTypeChange}\n                    >\n                        <MenuItem value={'WindSpeed'}>Wind Speed</MenuItem>\n                        <MenuItem value={'RainRate'}>\n                            Precipitation Rate\n                        </MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n\n            {meteGrahphType === 'WindSpeed' && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <FormControl fullWidth sx={{ mb: 1, width: '100%' }}>\n                        <InputLabel id=\"demo-simple-select-label\">\n                            Wind Speed Type\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={meteWindSpeedType}\n                            label=\"Type\"\n                            defaultValue={'WindMagnitude'}\n                            onChange={handleWindSpeedTypeChange}\n                        >\n                            <MenuItem value={'WindMagnitude'}>\n                                Wind Magnitude\n                            </MenuItem>\n                            <MenuItem value={'WindAngle'}>Wind Angle</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            )}\n\n            <Grid container p={1} pt={3} pb={0}>\n                <Grid item lg={12} md={12} sm={12} xs={12}>\n                    <ButtonBox>\n                        <StyledButton\n                            variant=\"contained\"\n                            component=\"span\"\n                            onClick={handleUpdateGraph}\n                        >\n                            <AutorenewIcon sx={{ mr: 1 }} />\n                            Update\n                        </StyledButton>\n\n                        <DownloadCsv\n                            loading={loading}\n                            startDate={startDate}\n                            endDate={endDate.substring(0, 10)}\n                            frequency={frequency}\n                            setLoading={setLoading}\n                            location={location}\n                            selectedValue={selectedValue}\n                            currentLocation={currentLocation}\n                            currType={meteGrahphType}\n                            meteGrahphType={meteGrahphType}\n                        />\n\n                        <DownloadPng\n                            loading={loading}\n                            image={image}\n                            setLoading={setLoading}\n                            startDate={startDate}\n                            endDate={endDate}\n                            location={location}\n                            frequency={frequency}\n                            selectedValue={'Spec'}\n                            name={'PNG'}\n                            ctdType=\"left\"\n                            meteGrahphType={meteGrahphType}\n                        />\n                    </ButtonBox>\n\n                    <AccordionDescrip\n                        selectedValue={'Mete'}\n                        currType={meteGrahphType}\n                    />\n                </Grid>\n            </Grid>\n\n            <Grid container>\n                {loading && (\n                    <Grid\n                        item\n                        lg={12}\n                        md={12}\n                        sm={12}\n                        xs={12}\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        textAlign=\"center\"\n                        mb=\"20px\"\n                    >\n                        <CircularProgress\n                            size={24}\n                            className=\"buttonProgress\"\n                        />\n                    </Grid>\n                )}\n            </Grid>\n\n            <Grid container>\n                <Grid item lg={12} md={12} sm={12} xs={12}>\n                    <FlexBox>\n                        <Box id=\"outer4\"></Box>\n                    </FlexBox>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nexport default React.memo(MeteGraph)\n","import React, { useEffect, useState } from 'react'\nimport { Grid, Button } from '@mui/material'\nimport SpecDatePicker from 'app/components/DatePicker/SpecDatePicker'\nimport { Box, styled } from '@mui/system'\nimport {\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    CircularProgress,\n} from '@mui/material'\nimport { getInitialGraph } from 'app/redux/actions/GraphActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getApiLocation } from '../../utils/utils'\nimport AccordionDescrip from 'app/components/Accordion/Accordion'\nimport { getSTUpdatedGraph } from 'app/redux/actions/GraphActions'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport DownloadCsv from 'app/components/Download/DownloadCsv'\nimport DownloadPng from 'app/components/Download/DownloadPng'\n\nconst ButtonBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    marginTop: '-10px',\n    '&:hover': {\n        cursor: 'pointer',\n    },\n}))\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n    width: '150px',\n    marginRight: '10px',\n    marginBottom: '10px',\n    backgroundColor: '#008255',\n    [theme.breakpoints.down('sm')]: {\n        fontSize: '12px',\n    },\n}))\n\nconst FlexBox = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    [theme.breakpoints.down('xl')]: {\n        justifyContent: 'flex-start',\n    },\n}))\n\nconst IMG = styled('img')(({ theme }) => ({\n    borderRadius: '4px',\n    [theme.breakpoints.down('sm')]: {\n        width: '110%',\n    },\n}))\n\nconst broadValid = [\n    'Oregon Shelf',\n    'Oregon Slope',\n    'Slope Base',\n    'Axial Base',\n    'Oregon Offshore'\n]\n\nconst doubleValid = [\n    'Oregon Slope',\n    'Slope Base',\n    'Axial Base'\n]\n\nconst Spectrogram = ({ currentLocation, selectedValue }) => {\n    const [startDate, setStartDate] = useState('2021-09-01T00:00')\n    const [endDate, setEndDate] = useState('2021-09-01T00:05')\n    const [graphType, setGraphType] = useState('Broadband')\n    const [avg_time, setAvgTime] = useState(1)\n    const [nperseg, setNperseg] = useState(4096)\n    const [overlap, setOverlap] = useState(50)\n    const [loading, setLoading] = useState(false)\n    const [image, setImage] = useState('')\n    const [currType, setCurrType] = useState('Broadband')\n    const [locType, setLocType] = useState('Seafloor')\n    const dispatch = useDispatch()\n    const { initSpecGraph } = useSelector((state) => state.graph)\n    const location = getApiLocation(currentLocation)\n\n    const handleSTUpdateGraph = () => {\n        setLoading(true)\n        setCurrType(graphType)\n        dispatch(\n            getSTUpdatedGraph(startDate, endDate, graphType, location, locType, overlap, nperseg, avg_time)\n        )\n    }\n\n    const fetchSpecData = async () => {\n        await dispatch(getInitialGraph(startDate, endDate, location))\n    }\n\n    const checkAvgTime = () => {\n        if (avg_time < 1 || avg_time > 3600) return true\n        return false\n    }\n\n    // const checkRelValues = () => {\n    //     if (avg_time*64000 <= nperseg) return true\n    //     return false\n    // }\n\n    // const checkNperseg = () => {\n    //     if (nperseg < 1 || nperseg > 4096) return true\n    //     return false\n    // }\n\n    const checkOverlap = () => {\n        if (overlap < 1 || overlap > 100) return true\n        return false\n    }\n\n    const handleAvgTimeChange = (event) => {\n        setAvgTime(event.target.value)\n    }\n\n    const handleNpersegChange = (event) => {\n        setNperseg(event.target.value)\n    }\n\n    const handleOverlapChange = (event) => {\n        setOverlap(event.target.value)\n    }\n\n    const handleTypeDropDown = (event) => {\n        setLocType(event.target.value)\n    }\n\n    useEffect(() => {\n        if (broadValid.includes(currentLocation)) fetchSpecData()\n    }, [currentLocation])\n\n    useEffect(() => {\n        if (currType === 'Broadband') {\n            if (Object.keys(initSpecGraph).length !== 0) {\n                setLoading(false)\n                const outer = document.getElementById('outer')\n                const el = document.createElement('div')\n                el.setAttribute('id', 'graphBox')\n                outer.appendChild(el)\n                window.Bokeh.embed.embed_item(initSpecGraph, 'graphBox')\n                return () => {\n                    if (document.getElementById('graphBox')) {\n                        const h1 = document.getElementById('graphBox')\n                        h1.remove()\n                    }\n                }\n            }\n        }\n    }, [initSpecGraph])\n\n    return (\n        <>\n            {broadValid.includes(currentLocation) && (\n                <Grid\n                    item\n                    lg={4}\n                    md={10}\n                    sm={12}\n                    xs={12}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    pt={0}\n                    sx={{ height: '70px' }}\n                >\n                    <SpecDatePicker\n                        startDate={startDate}\n                        endDate={endDate}\n                        setStartDate={setStartDate}\n                        setEndDate={setEndDate}\n                        // error={checkDates()}\n                        // helperText={\n                        //     checkDates() && 'Date range must be within 2 days'\n                        // }\n                    />\n                </Grid>\n            )}\n\n            {doubleValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <FormControl fullWidth sx={{ mb: 1, width: '100%' }}>\n                        <InputLabel id=\"demo-simple-select-label\">\n                            Hydrophone Depth\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={locType}\n                            label=\"Type\"\n                            defaultValue={'Seafloor'}\n                            onChange={handleTypeDropDown}\n                        >\n                            <MenuItem value={'Seafloor'}>\n                                Seafloor\n                            </MenuItem>\n                            <MenuItem value={'Shallow'}>\n                                Shallow\n                            </MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            )}\n\n            {broadValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <TextField\n                        error={checkAvgTime()}\n                        // error={checkAvgTime() || checkRelValues()}\n                        helperText={\n                            (checkAvgTime() && 'Averaging Time not in valid range')\n                            // (checkAvgTime() && 'Averaging Time not in valid range') ||\n                            // (checkRelValues() && 'Avg Time x 64000 > nperseg not met')\n                        }\n                        disabled={graphType === 'Broadband' ? false : true}\n                        required\n                        value={avg_time}\n                        id=\"outlined-required\"\n                        label=\"Averaging Time (in secs) : 1-3600\"\n                        onChange={handleAvgTimeChange}\n                    />\n                </Grid>\n            )}\n\n            {broadValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <TextField\n                        // error={checkNperseg()}\n                        // helperText={\n                        //     checkNperseg() && 'Nperseg not in valid range'\n                        // }\n                        disabled={graphType === 'Broadband' ? false : true}\n                        required\n                        value={nperseg}\n                        id=\"outlined-required\"\n                        label=\"N per segment for FFT\"\n                        onChange={handleNpersegChange}\n                    />\n                </Grid>\n            )}\n\n            {broadValid.includes(currentLocation) && (\n                <Grid item lg={3} md={3} sm={6} xs={12}>\n                    <TextField\n                        error={checkOverlap()}\n                        helperText={\n                            checkOverlap() && 'Overlap not in valid range'\n                        }\n                        disabled={graphType === 'Broadband' ? false : true}\n                        required\n                        value={overlap}\n                        id=\"outlined-required\"\n                        label=\"Overlap : 1-100\"\n                        onChange={handleOverlapChange}\n                    />\n                </Grid>\n            )}\n\n            {broadValid.includes(currentLocation) && (\n                <Grid container p={1} pt={3} pb={0}>\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <ButtonBox>\n                            <StyledButton\n                                disabled={checkAvgTime()}\n                                variant=\"contained\"\n                                component=\"span\"\n                                onClick={handleSTUpdateGraph}\n                            >\n                                <AutorenewIcon sx={{ mr: 1 }} />\n                                Update\n                            </StyledButton>\n\n                            {/* <DownloadCsv\n                                loading={loading}\n                                startDate={startDate}\n                                endDate={endDate.substring(0, 10)}\n                                frequency={frequency}\n                                currType={currType}\n                                setLoading={setLoading}\n                                location={location}\n                                selectedValue={selectedValue}\n                                currentLocation={currentLocation}\n                            />\n\n                            <DownloadPng\n                                loading={loading}\n                                currType={currType}\n                                image={image}\n                                setLoading={setLoading}\n                                startDate={startDate}\n                                endDate={endDate}\n                                location={location}\n                                frequency={frequency}\n                                selectedValue={'Broad'}\n                                name={'PNG'}\n                                ctdType=\"left\"\n                            /> */}\n                        </ButtonBox>\n\n                        <AccordionDescrip\n                            selectedValue={'Broad'}\n                            currType={currType}\n                        />\n                    </Grid>\n                </Grid>\n            )}\n\n            <Grid container>\n                {loading && (\n                    <Grid\n                        item\n                        lg={12}\n                        md={12}\n                        sm={12}\n                        xs={12}\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        textAlign=\"center\"\n                        mb=\"20px\"\n                    >\n                        <CircularProgress\n                            size={24}\n                            className=\"buttonProgress\"\n                        />\n                    </Grid>\n                )}\n            </Grid>\n\n            <Grid container>\n                <Grid item lg={12} md={12} sm={12} xs={12}>\n                    <FlexBox style={{ overflow: 'auto' }}>\n                        <Box id=\"outer\"></Box>\n                    </FlexBox>\n                </Grid>\n            </Grid>\n\n        </>\n    )\n}\n\nexport default React.memo(Spectrogram)","import React from 'react'\nimport { IconButton, Icon } from '@mui/material'\nimport { Box, styled, useTheme } from '@mui/system'\nimport { convertHexToRGB } from 'app/utils/utils'\nimport { Card, Grid } from '@mui/material'\nimport Backdrop from '@mui/material/Backdrop'\nimport Radio from '@mui/material/Radio'\nimport Spectrogram from '../GraphCollection/Spectrogram'\nimport CTD from '../GraphCollection/CTD'\nimport MeteGraph from '../GraphCollection/MeteGraph'\nimport Broadband from '../GraphCollection/Broadband'\n\nconst ChartHeader = styled(Box)(({ theme }) => ({\n    position: 'fixed',\n    display: 'flex',\n    zIndex: 200,\n    backgroundColor: '#FFFFFF',\n    alignItems: 'center',\n    width: 'inherit',\n    padding: '.8rem 1.25rem',\n    justifyContent: 'space-between',\n    borderBottom: `1px solid ${`rgba(${convertHexToRGB(\n        theme.palette.text.disabled\n    )}, 0.2)`}`,\n}))\n\nconst AnalyticsRoot = styled(Card)(({ theme }) => ({\n    [theme.breakpoints.down('lg')]: {\n        width: '90%',\n        height: '80%',\n    },\n    [theme.breakpoints.down('md')]: {\n        width: '95%',\n        height: '80%',\n    },\n    [theme.breakpoints.down('sm')]: {\n        width: '90vw',\n        height: '85vh',\n    },\n    '& .showGraph': {\n        display: 'block',\n    },\n    '& .hideGraph': {\n        display: 'none',\n    },\n}))\n\nconst StyledH3 = styled('div')(() => ({\n    fontSize: '16px',\n    fontWeight: '500',\n    lineHeight: '1.5',\n}))\n\nconst ctdValid = [\n    'Oregon Offshore',\n    'Oregon Slope',\n    'Oregon Shelf',\n    'Axial Base',\n]\n\nconst specValid = [\n    'Axial Base',\n    'Central Caldera',\n    'Eastern Caldera',\n    'Slope Base',\n    'Southern Hydrate',\n]\n\nconst broadValid = [\n    'Oregon Shelf',\n    'Oregon Slope',\n    'Slope Base',\n    'Axial Base',\n    'Oregon Offshore'\n]\n\nconst obsValid = [\n    'Axial Base',\n    'Slope Base',\n    'Eastern Caldera',\n    'Central Caldera',\n    'Axial Ashes',\n    'Axial International',\n    'Southern Hydrate'\n]\n\nconst meteorologyValid = ['Oregon Offshore', 'Oregon Shelf']\n\nconst GraphDialog = ({ currentLocation, open, handleClose }) => {\n    const { palette } = useTheme()\n    const textPrimary = palette.text.primary\n    // console.log('render')\n    const [selectedValue, setSelectedValue] = React.useState('Spec')\n    const handleRadioChange = async (event) => {\n        setSelectedValue(event.target.value)\n    }\n\n    const controlProps = (item) => ({\n        checked: selectedValue === item,\n        onChange: handleRadioChange,\n        value: item,\n        name: 'color-radio-button-demo',\n        inputProps: { 'aria-label': item },\n    })\n\n    console.log('dd', currentLocation)\n    return (\n        <Backdrop open={open} sx={{ zIndex: 101 }}>\n            <AnalyticsRoot\n                sx={{\n                    width: '85%',\n                    height: '80%',\n                    overflow: 'scroll',\n                }}\n            >\n                <ChartHeader>\n                    <StyledH3>\n                        {currentLocation} Hydrophone Visualization\n                    </StyledH3>\n                    <IconButton onClick={handleClose}>\n                        <Icon sx={{ color: textPrimary }}>close</Icon>\n                    </IconButton>\n                </ChartHeader>\n\n                <Grid\n                    container\n                    spacing={1}\n                    p={4}\n                    pb={0}\n                    mt={7}\n                    mb={2}\n                    sx={{\n                        '& .MuiTextField-root': { width: '100%' },\n                    }}\n                >\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <Radio {...controlProps('Spec')} /> Low Frequency Hydrophone Data\n                        <Radio {...controlProps('CTD')} /> CTD Data\n                        <Radio {...controlProps('Broad')} /> Broadband Hydrophone Data\n                        <Radio {...controlProps('OBS')} /> OBS Data\n                        {meteorologyValid.includes(currentLocation) && (\n                            <>\n                                <Radio {...controlProps('Mete')} /> Meteorology\n                                Data\n                            </>\n                        )}\n                    </Grid>\n\n                    {selectedValue === 'Spec' &&\n                        specValid.includes(currentLocation) && (\n                            <Spectrogram\n                                currentLocation={currentLocation}\n                                selectedValue={'Spec'}\n                            />\n                        )}\n                    {!specValid.includes(currentLocation) &&\n                        selectedValue === 'Spec' && (\n                            <Box p={3}>\n                                This location doesn't have a low frequency\n                                hydrophone\n                            </Box>\n                        )}\n\n                    {selectedValue === 'OBS' &&\n                        obsValid.includes(currentLocation) && (\n                            <Spectrogram\n                                currentLocation={currentLocation}\n                                selectedValue={'OBS'}\n                            />\n                        )}\n                    {!obsValid.includes(currentLocation) &&\n                        selectedValue === 'OBS' && (\n                            <Box p={3}>\n                                This location doesn't have an OBS\n                                hydrophone\n                            </Box>\n                        )}\n\n                    {selectedValue === 'Broad' &&\n                        broadValid.includes(currentLocation) && (\n                            <Broadband\n                                currentLocation={currentLocation}\n                                selectedValue={'Broad'}\n                            />\n                        )}\n                    {!broadValid.includes(currentLocation) &&\n                        selectedValue === 'Broad' && (\n                            <Box p={3}>\n                                This location doesn't have a broadband\n                                hydrophone\n                            </Box>\n                        )}\n\n                    {selectedValue === 'CTD' &&\n                        ctdValid.includes(currentLocation) && (\n                            <CTD\n                                currentLocation={currentLocation}\n                                selectedValue={'CTD'}\n                            />\n                        )}\n\n                    {!ctdValid.includes(currentLocation) &&\n                        selectedValue === 'CTD' && (\n                            <Box p={3}>This location doesn't have CTD.</Box>\n                        )}\n\n                    {selectedValue === 'Mete' &&\n                        meteorologyValid.includes(currentLocation) && (\n                            <MeteGraph\n                                currentLocation={currentLocation}\n                                selectedValue={'Mete'}\n                            />\n                        )}\n                </Grid>\n            </AnalyticsRoot>\n        </Backdrop>\n    )\n}\nexport default React.memo(GraphDialog)\n","import React, {\n    useRef,\n    useEffect,\n    useState,\n    Fragment,\n    useCallback,\n} from 'react'\n// import GrapDialog from 'app/views/CRUD/GrapDialog'\nimport GraphDialog from 'app/views/CRUD/GraphDialog'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { GET_INIT_GRAPH } from 'app/redux/actions/GraphActions.js'\n\nimport { styled, Box } from '@mui/system'\n\nconst StyledBox = styled(Box)(() => ({\n    padding: 0,\n    margin: 0,\n    height: '100%',\n    width: '100%',\n}))\n\nconst TimeSliderBox = styled('div')(() => ({\n    position: 'absolute',\n    width: '700px',\n    left: '5%',\n    right: '5%',\n    bottom: '20px',\n}))\n\nexport default function WebMap() {\n    const elementRef = useRef()\n    const { graphList = [] } = useSelector((state) => state.graph)\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\n    const [currentLocation, setCurrentLocation] = useState('')\n    const dispatch = useDispatch()\n\n    const handleDialogClose = () => {\n        setShouldOpenEditorDialog(false)\n        dispatch({\n            type: GET_INIT_GRAPH,\n            payload: {},\n        })\n    }\n\n    const handleOpenDialog = useCallback((open, currentLocation) => {\n        setShouldOpenEditorDialog(open)\n        setCurrentLocation(currentLocation)\n    }, [])\n\n    useEffect((_) => {\n        let cleanup\n        import('./mapcore').then(\n            (app) =>\n                (cleanup = app.initialize(\n                    elementRef.current,\n                    setCurrentLocation,\n                    handleOpenDialog\n                ))\n        )\n        return () => cleanup && cleanup()\n    }, [])\n\n    // assign elementRef to the ref of our component\n    return (\n        <>\n            <StyledBox className=\"viewDiv\" ref={elementRef}></StyledBox>\n            <TimeSliderBox id=\"timeSlider\"></TimeSliderBox>\n\n            {shouldOpenEditorDialog && (\n                <GraphDialog\n                    currentLocation={currentLocation}\n                    graphData={graphList}\n                    handleClose={handleDialogClose}\n                    open={shouldOpenEditorDialog}\n                />\n            )}\n        </>\n    )\n}\n","import React from 'react'\nimport Map from 'app/views/map/map'\n\nconst Analytics2 = () => {\n    return <Map />\n}\n\nexport default Analytics2\n","import { differenceInSeconds } from 'date-fns'\r\n\r\nexport const convertHexToRGB = (hex) => {\r\n    // check if it's a rgba\r\n    if (hex.match('rgba'))\r\n    {\r\n        let triplet = hex.slice(5).split(',').slice(0, -1).join(',')\r\n        return triplet\r\n    }\r\n\r\n    let c\r\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex))\r\n    {\r\n        c = hex.substring(1).split('')\r\n        if (c.length === 3)\r\n        {\r\n            c = [c[0], c[0], c[1], c[1], c[2], c[2]]\r\n        }\r\n        c = '0x' + c.join('')\r\n\r\n        return [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',')\r\n    }\r\n}\r\n\r\nexport function debounce(func, wait, immediate) {\r\n    var timeout\r\n    return function () {\r\n        var context = this,\r\n            args = arguments\r\n        clearTimeout(timeout)\r\n        timeout = setTimeout(function () {\r\n            timeout = null\r\n            if (!immediate) func.apply(context, args)\r\n        }, wait)\r\n        if (immediate && !timeout) func.apply(context, args)\r\n    }\r\n}\r\n\r\nexport function isMobile() {\r\n    if (window)\r\n    {\r\n        return window.matchMedia(`(max-width: 767px)`).matches\r\n    }\r\n    return false\r\n}\r\n\r\nexport function isMdScreen() {\r\n    if (window)\r\n    {\r\n        return window.matchMedia(`(max-width: 1199px)`).matches\r\n    }\r\n    return false\r\n}\r\n\r\nfunction currentYPosition(elm) {\r\n    if (!window && !elm)\r\n    {\r\n        return\r\n    }\r\n    if (elm) return elm.scrollTop\r\n    // Firefox, Chrome, Opera, Safari\r\n    if (window.pageYOffset) return window.pageYOffset\r\n    // Internet Explorer 6 - standards mode\r\n    if (document.documentElement && document.documentElement.scrollTop)\r\n        return document.documentElement.scrollTop\r\n    // Internet Explorer 6, 7 and 8\r\n    if (document.body.scrollTop) return document.body.scrollTop\r\n    return 0\r\n}\r\n\r\nfunction elmYPosition(elm) {\r\n    var y = elm.offsetTop\r\n    var node = elm\r\n    while (node.offsetParent && node.offsetParent !== document.body)\r\n    {\r\n        node = node.offsetParent\r\n        y += node.offsetTop\r\n    }\r\n    return y\r\n}\r\n\r\nexport function scrollTo(scrollableElement, elmID) {\r\n    var elm = document.getElementById(elmID)\r\n\r\n    if (!elmID || !elm)\r\n    {\r\n        return\r\n    }\r\n\r\n    var startY = currentYPosition(scrollableElement)\r\n    var stopY = elmYPosition(elm)\r\n\r\n    var distance = stopY > startY ? stopY - startY : startY - stopY\r\n    if (distance < 100)\r\n    {\r\n        scrollTo(0, stopY)\r\n        return\r\n    }\r\n    var speed = Math.round(distance / 50)\r\n    if (speed >= 20) speed = 20\r\n    var step = Math.round(distance / 25)\r\n    var leapY = stopY > startY ? startY + step : startY - step\r\n    var timer = 0\r\n    if (stopY > startY)\r\n    {\r\n        for (var i = startY; i < stopY; i += step)\r\n        {\r\n            setTimeout(\r\n                (function (leapY) {\r\n                    return () => {\r\n                        scrollableElement.scrollTo(0, leapY)\r\n                    }\r\n                })(leapY),\r\n                timer * speed\r\n            )\r\n            leapY += step\r\n            if (leapY > stopY) leapY = stopY\r\n            timer++\r\n        }\r\n        return\r\n    }\r\n    for (let i = startY; i > stopY; i -= step)\r\n    {\r\n        setTimeout(\r\n            (function (leapY) {\r\n                return () => {\r\n                    scrollableElement.scrollTo(0, leapY)\r\n                }\r\n            })(leapY),\r\n            timer * speed\r\n        )\r\n        leapY -= step\r\n        if (leapY < stopY) leapY = stopY\r\n        timer++\r\n    }\r\n    return false\r\n}\r\n\r\nexport function getTimeDifference(date) {\r\n    let difference = differenceInSeconds(new Date(), date)\r\n\r\n    if (difference < 60) return `${Math.floor(difference)} sec`\r\n    else if (difference < 3600) return `${Math.floor(difference / 60)} min`\r\n    else if (difference < 86400) return `${Math.floor(difference / 3660)} h`\r\n    else if (difference < 86400 * 30)\r\n        return `${Math.floor(difference / 86400)} d`\r\n    else if (difference < 86400 * 30 * 12)\r\n        return `${Math.floor(difference / 86400 / 30)} mon`\r\n    else return `${(difference / 86400 / 30 / 12).toFixed(1)} y`\r\n}\r\n\r\nexport function generateRandomId() {\r\n    let tempId = Math.random().toString()\r\n    let uid = tempId.substr(2, tempId.length - 1)\r\n    return uid\r\n}\r\n\r\nexport function getQueryParam(prop) {\r\n    var params = {}\r\n    var search = decodeURIComponent(\r\n        window.location.href.slice(window.location.href.indexOf('?') + 1)\r\n    )\r\n    var definitions = search.split('&')\r\n    definitions.forEach(function (val, key) {\r\n        var parts = val.split('=', 2)\r\n        params[parts[0]] = parts[1]\r\n    })\r\n    return prop && prop in params ? params[prop] : params\r\n}\r\n\r\nexport function classList(classes) {\r\n    return Object.entries(classes)\r\n        .filter((entry) => entry[1])\r\n        .map((entry) => entry[0])\r\n        .join(' ')\r\n}\r\n\r\nexport const flat = (array) => {\r\n    var result = []\r\n    array.forEach(function (a) {\r\n        result.push(a)\r\n        if (Array.isArray(a.children))\r\n        {\r\n            result = result.concat(flat(a.children))\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\nexport const getApiLocation = (location) => {\r\n    return location.replace(' ', '_').toLowerCase()\r\n}\r\n\r\n\r\nexport const handleOutputName = (location, start, end, selectedValue = \"\") => {\r\n    if (selectedValue === \"CTD\")\r\n        return location + '-CTD-' + start + '-' + end\r\n    return location + '-' + start + '-' + end\r\n}\r\n","import clsx from 'clsx'\nimport React from 'react'\nimport { Box, styled } from '@mui/material'\n\nconst StyledBox = styled(Box)(({ theme, textTransformStyle, ellipsis }) => ({\n    textTransform: textTransformStyle || 'none',\n    whiteSpace: ellipsis ? 'nowrap' : 'normal',\n    overflow: ellipsis ? 'hidden' : '',\n    textOverflow: ellipsis ? 'ellipsis' : '',\n    // color: theme.palette.primary.contrastText,\n}))\n\nexport const H1 = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({ [className || '']: true })}\n            component=\"h1\"\n            mb={0}\n            mt={0}\n            fontSize=\"28px\"\n            fontWeight=\"500\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const H2 = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({ [className || '']: true })}\n            component=\"h2\"\n            mb={0}\n            mt={0}\n            fontSize=\"24px\"\n            fontWeight=\"500\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const H3 = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({ [className || '']: true })}\n            component=\"h3\"\n            mb={0}\n            mt={0}\n            fontSize=\"18px\"\n            fontWeight=\"500\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const H4 = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({\n                [className || '']: true,\n            })}\n            component=\"h4\"\n            mb={0}\n            mt={0}\n            fontSize=\"16px\"\n            fontWeight=\"500\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const H5 = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({\n                [className || '']: true,\n            })}\n            component=\"h5\"\n            mb={0}\n            mt={0}\n            fontSize=\"14px\"\n            fontWeight=\"500\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const H6 = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({\n                [className || '']: true,\n            })}\n            component=\"h6\"\n            mb={0}\n            mt={0}\n            fontSize=\"13px\"\n            fontWeight=\"500\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const Paragraph = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({\n                [className || '']: true,\n            })}\n            component=\"p\"\n            mb={0}\n            mt={0}\n            fontSize=\"14px\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const Small = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({\n                [className || '']: true,\n            })}\n            component=\"small\"\n            fontSize=\"12px\"\n            fontWeight=\"500\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const Span = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({\n                [className || '']: true,\n            })}\n            component=\"span\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n\nexport const Tiny = ({\n    children,\n    className,\n    ellipsis,\n    textTransform,\n    ...props\n}) => {\n    return (\n        <StyledBox\n            textTransformStyle={textTransform}\n            ellipsis={ellipsis}\n            className={clsx({\n                [className || '']: true,\n            })}\n            component=\"small\"\n            fontSize=\"10px\"\n            lineHeight=\"1.5\"\n            {...props}\n        >\n            {children}\n        </StyledBox>\n    )\n}\n"],"sourceRoot":""}